// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id         Int      @id @default(autoincrement())
  entity_id  Int
  user_id    Int
  login      String
  password   String
  country_id Int
  status     String   @default("unconnected")
  state      String   @default("waiting")
  locked     Boolean  @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  country Country @relation(fields: [country_id], references: [id], onDelete: Cascade)
  entity Entity @relation(fields: [entity_id], references: [id], onDelete: Cascade)


  @@unique([login, country_id])

  @@map("accounts")
  token Token[]
  assignment Assignment[]
}


model Country {
  id        Int      @id @default(autoincrement())
  libelle   String
  code      String
  alias     String   @unique
  flag      String
  currency  String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  

  @@map("countries")
  account Account[]
  otp Otp[]
}

model User {
  id         Int      @id @default(autoincrement())
  civility   String
  name       String
  surname    String
  picture    String?
  birthdate  DateTime?
  number     String


  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
  account Account[]
}

model Otp{
  id         Int      @id @default(autoincrement())
  code       String
  type       String
  value      String
  country_id Int
  state      String   @default("waiting")
  attempt    Int      @default(1)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  country    Country @relation(fields: [country_id], references: [id], onDelete: Cascade)

  @@unique([type, country_id, value])


  @@map("otps")
}

model Token{
  id         Int      @id @default(autoincrement())
  token      String   @unique
  type       String
  account_id Int      @unique

  created_at DateTime @default(now())
  expired_at DateTime @updatedAt
  updated_at DateTime @updatedAt

  account Account @relation(fields: [account_id], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model Entity{
  id         Int      @id @default(autoincrement())
  libelle    String
  code       String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("entities")
  account Account[]
}

model Role {
  id         Int      @id @default(autoincrement())
  libelle    String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("roles")
  assignment Assignment[]
}

model Assignment {
  id         Int      @id @default(autoincrement())
  role_id    Int
  account_id Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)
  account Account @relation(fields: [account_id], references: [id], onDelete: Cascade)

  @@map("assignments")
}