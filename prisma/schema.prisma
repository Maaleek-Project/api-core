// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id         String      @id @default(uuid())
  entity_id  String
  user_id    String
  login      String      @unique
  password   String
  country_id String
  status     String   @default("unconnected")
  state      String   @default("waiting")
  locked     Boolean  @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  country Country @relation(fields: [country_id], references: [id], onDelete: Cascade)
  entity Entity @relation(fields: [entity_id], references: [id], onDelete: Cascade)


  @@unique([login, country_id])

  @@map("accounts")
  token Token[]
  assignment Assignment[]
}


model Country {
  id        String      @id @default(uuid())
  libelle   String
  code      String
  alias     String   @unique
  flag      String
  currency  String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  

  @@map("countries")
  account Account[]
  otp Otp[]
}

model User {
  id         String      @id @default(uuid())
  civility   String
  name       String
  surname    String
  picture    String?
  birthdate  DateTime?
  number     String      @unique
  email      String?     @unique


  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
  account Account[]
  businessCard BusinessCard[]
}

model Otp{
  id         String      @id @default(uuid())
  code       String
  type       String
  value      String
  country_id String
  state      String   @default("waiting")
  attempt    Int      @default(1)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  country    Country @relation(fields: [country_id], references: [id], onDelete: Cascade)

  @@unique([type, country_id, value])


  @@map("otps")
}

model Token{
  id         String   @id @default(uuid())
  token      String   @unique
  type       String
  account_id String      @unique

  created_at DateTime @default(now())
  expired_at DateTime @updatedAt
  updated_at DateTime @updatedAt

  account Account @relation(fields: [account_id], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model Entity{
  id         String      @id @default(uuid())
  libelle    String
  code       String      @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("entities")
  account Account[]
}

model Role {
  id         String      @id @default(uuid())
  libelle    String      @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("roles")
  assignment Assignment[]
}

model Assignment {
  id         String      @id @default(uuid())
  role_id    String
  account_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)
  account Account @relation(fields: [account_id], references: [id], onDelete: Cascade)

  @@map("assignments")
}

model Company{
  id         String      @id @default(uuid())
  account_id String
  number     String      @unique
  email      String      @unique
  name       String
  address    String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("companies")
  BusinessCard BusinessCard[]
}


model BusinessCard{
  id         String      @id @default(uuid())
  user_id    String @unique
  offer_id   String 
  number     String      @unique
  email      String?     @unique
  job        String?
  company_id String? 
  

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  company Company? @relation(fields: [company_id], references: [id], onDelete: Cascade)
  offer Offer @relation(fields: [offer_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("business_cards")
}

model Offer {
  id         String      @id @default(uuid())
  libelle    String
  sharing_number Int
  code       String      @unique


  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("offers")
  BusinessCard BusinessCard[]
}